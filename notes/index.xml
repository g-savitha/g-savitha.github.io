<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Notes on Savitha Gollamudi</title><link>https://www.gsavitha.in/notes/</link><description>Recent content in Notes on Savitha Gollamudi</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 02 Sep 2020 16:05:07 +0530</lastBuildDate><atom:link href="https://www.gsavitha.in/notes/index.xml" rel="self" type="application/rss+xml"/><item><title>GCD</title><link>https://www.gsavitha.in/notes/ch-03-gcd/</link><pubDate>Wed, 02 Sep 2020 16:05:07 +0530</pubDate><guid>https://www.gsavitha.in/notes/ch-03-gcd/</guid><description>LCM and HCF Factors and multiples: All numbers that divide a number completely, i.e., without leaving any remainder, are called factors of that number. For example, 24 is completely divisible by 1, 2, 3, 4, 6, 8, 12, 24. Each of these numbers is called a factor of 24 and 24 is called a multiple of each of these numbers. HCF or GCD : The largest number that divides two or more numbers is the highest common factor (HCF) for those numbers.</description></item><item><title>Prime Numbers</title><link>https://www.gsavitha.in/notes/ch-02-prime-num/</link><pubDate>Wed, 02 Sep 2020 16:04:56 +0530</pubDate><guid>https://www.gsavitha.in/notes/ch-02-prime-num/</guid><description>Numbers &amp;gt; 0 which are divisible by 1 and itself. Example: 2,3,5,7,11..
Facts about prime numbers: Every prime number can be represented in form of (6n+1) and (6n-1) except 2 and 3, when n &amp;gt; 0. 5 : (6 * 1 ) -1, 29: (6 * 5) - 1 2 and 3 are only two consecutive natural numbers, which are prime too. 1 is neither prime nor composite.</description></item><item><title>Basic Math</title><link>https://www.gsavitha.in/notes/ch-01-basic-math/</link><pubDate>Wed, 02 Sep 2020 16:04:36 +0530</pubDate><guid>https://www.gsavitha.in/notes/ch-01-basic-math/</guid><description>Progressions Arithmetic Progression : A sequence of numbers is said to be in an Arithmetic progression if the difference between any two consecutive terms is always the same. 2, 4, 6, 8, 10 is an AP series because they have a common difference (4-2=6-4=8-6=10-8)
Few facts about AP Initial Term (a): first number in the series Common difference (d): The value by which consecutive terms increase or decrease The behavior of the AP depends on the common difference d.</description></item><item><title>React Lifecycle Methods</title><link>https://www.gsavitha.in/notes/ch-07-react-lifecycle-methods/</link><pubDate>Tue, 01 Sep 2020 18:20:33 +0530</pubDate><guid>https://www.gsavitha.in/notes/ch-07-react-lifecycle-methods/</guid><description>React Component Lifecycle -Each component has several “lifecycle methods” that one can override to run code at particular times in the process.
These components comes with methods which allows developers to update application state and reflect the changes to the UI before/after key react “events”. There are three main phases in a component&amp;rsquo;s lifecycle: mounting updating unmounting Mounting These methods are called in the following order</description></item><item><title>React Forms</title><link>https://www.gsavitha.in/notes/ch-06-react-forms/</link><pubDate>Sun, 30 Aug 2020 17:51:50 +0530</pubDate><guid>https://www.gsavitha.in/notes/ch-06-react-forms/</guid><description>Forms HTML form elements work differently than other DOM elements in React Form elements naturally keep some internal state. For example, this form in plain HTML accepts a single name: &amp;lt;form&amp;gt; &amp;lt;label for=&amp;#34;fullname&amp;#34;&amp;gt;Full Name:&amp;lt;/label&amp;gt; &amp;lt;input name=&amp;#34;fullname&amp;#34; /&amp;gt; &amp;lt;button&amp;gt;Add!&amp;lt;/button&amp;gt; &amp;lt;/form&amp;gt; Thinking About State &amp;lt;form&amp;gt; &amp;lt;label for=&amp;#34;fullname&amp;#34;&amp;gt;Full Name:&amp;lt;/label&amp;gt; &amp;lt;input name=&amp;#34;fullname&amp;#34; /&amp;gt; &amp;lt;button&amp;gt;Add!&amp;lt;/button&amp;gt; &amp;lt;/form&amp;gt; It’s convenient to have a JS function that handles the submission of the form and has access to the data the user entered.</description></item><item><title>React Events</title><link>https://www.gsavitha.in/notes/ch-05-react-events/</link><pubDate>Tue, 25 Aug 2020 14:55:24 +0530</pubDate><guid>https://www.gsavitha.in/notes/ch-05-react-events/</guid><description>React Events Review Commonly used React Events You can attach event handlers to HTML elements in React via special reserved attributes. (You can do this in vanilla JS too, though the syntax is a bit different.)
Event Attributes Any event you can listen for in JS, you can listen for in React.
Examples:
Mouse events: onClick, onMouseOver, etc Form events: onSubmit, etc Keyboard events: onKeyDown, onKeyUp, onKeyPress Full list Example: WiseSquare.</description></item><item><title>React State Patterns</title><link>https://www.gsavitha.in/notes/ch-04-react-state-patterns/</link><pubDate>Mon, 24 Aug 2020 15:52:45 +0530</pubDate><guid>https://www.gsavitha.in/notes/ch-04-react-state-patterns/</guid><description>Setting State Using State We know that setState() is asynchronous…
So: it’s risky to assume previous call has finished when you call it. Also, React will sometimes batch (squash together) calls to setState together into one for performance reasons. If a call to setState() depends on current state, the safest thing is to use the alternate “callback form”.
setState Callback Form this.setState(callback)
Instead of passing an object, pass it a callback with the current state as a parameter.</description></item><item><title>Intro to State</title><link>https://www.gsavitha.in/notes/ch-03-intro-to-state/</link><pubDate>Mon, 24 Aug 2020 14:57:47 +0530</pubDate><guid>https://www.gsavitha.in/notes/ch-03-intro-to-state/</guid><description>What is State? Thinking about state In any sufficiently advanced web application, the user interface has to be stateful.
logged-in users see a different screen than logged-out users clicking “edit profile” opens up a modal (pop-up) window sections of a website can expand or collapse, for instance clicking “read more” The state of the client interface (frontend) is not always directly tied to state on the server.
Why would the server need to know if a modal is open?</description></item><item><title>CRA and Modules</title><link>https://www.gsavitha.in/notes/ch-02-cra-modules/</link><pubDate>Mon, 24 Aug 2020 13:23:51 +0530</pubDate><guid>https://www.gsavitha.in/notes/ch-02-cra-modules/</guid><description>Create react App React is a front-end library — you don’t need server-side stuff. You can get react.js and react-dom.js from a CDN. You can transpile JSX in the browser at runtime. But there’s a better way!
Create-React-App is a utility script that:
Creates a skeleton react project Sets it up so that JS files are run through Babel automatically. Lets us use super-modern Javascript features/idioms Makes testing &amp;amp; deployment much easier.</description></item><item><title>Intro to React</title><link>https://www.gsavitha.in/notes/ch-01-intro-to-react/</link><pubDate>Mon, 24 Aug 2020 12:28:38 +0530</pubDate><guid>https://www.gsavitha.in/notes/ch-01-intro-to-react/</guid><description>Popular, powerful front-end framework.
Developed by and sponsored by Facebook.
Make it easy to make reusable view components These encapsulate logic and HTML into a class Often make it easier to build modular applications Components :
The building blocks of React Pieces of UI &amp;amp; view logic Classes that know how to render themselves into HTML A bit like this&amp;hellip;
class Dog { constructor(name, color) { this.</description></item><item><title>Recursion</title><link>https://www.gsavitha.in/notes/recursion/</link><pubDate>Sun, 23 Aug 2020 17:17:32 +0530</pubDate><guid>https://www.gsavitha.in/notes/recursion/</guid><description>Intro to recursion What is recursion?
Recursion : A function calling itself directly or indirectly.
Directly:
void fun1(){ //somecode ... fun1(); //some other code... } Indirectly: Not a very common approach (Mostly direct recursive approach is used)
void fun1(){ //somecode ... fun2(); //some other code... } void fun2(){ //somecode ... fun1(); //some other code... } If you dont add a base case, recursion never stops and we might end up with stackoverflow(in case of java) or segmentation fault error(in case of cpp).</description></item></channel></rss>