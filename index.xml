<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on Savitha Gollamudi</title><link>https://www.gsavitha.in/</link><description>Recent content in Home on Savitha Gollamudi</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://www.gsavitha.in/index.xml" rel="self" type="application/rss+xml"/><item><title>Works</title><link>https://www.gsavitha.in/work/</link><pubDate>Sat, 22 Aug 2020 04:15:53 +0530</pubDate><guid>https://www.gsavitha.in/work/</guid><description>Following are some of my projects which I have done in last few years. .project-wrapper { display: grid; grid-template-columns: 1fr 1fr; column-gap: 2rem; padding: 1rem; max-width: 70rem; } .project-wrapper .card { padding: 1rem 0; border-bottom: 1px dotted lightgray; } @media (max-width: 500px) { .project-wrapper { padding: 0; grid-template-columns: 1fr; } } Maze game A classic rat and maze puzzle game. A random maze is generated every time. I have built this game to strengthen by DSA skills and also explored Canvas API and Matter.</description></item><item><title>Analysis of Algorithms</title><link>https://www.gsavitha.in/notes/analysis-of-algorithms/</link><pubDate>Fri, 31 Jul 2020 21:42:44 +0530</pubDate><guid>https://www.gsavitha.in/notes/analysis-of-algorithms/</guid><description>why performance analysis? because it is important for a software to scale
Asymptotic Analysis Geeks For Geeks</description></item><item><title>Slice Type in Rust</title><link>https://www.gsavitha.in/2020/slice-type-in-rust/</link><pubDate>Tue, 30 Jun 2020 12:26:32 +0530</pubDate><guid>https://www.gsavitha.in/2020/slice-type-in-rust/</guid><description>In Rust, there is a concept of borrowing and taking ownership. This is a concept not many languages implement.
Ownership and Borrowing In a Rust program, any given value is owned by a variable. For instance, if we declare let a = 30;, value 30 would be owned by variable a.
Following is a program to illustrate it:
// won&amp;#39;t compile fn main(){letsome_string=String::from(&amp;#34;hello world&amp;#34;);println!(&amp;#34;Length {}&amp;#34;,str_length(some_string));println!(&amp;#34;string is &amp;#39;{}&amp;#39;&amp;#34;,some_string);}fn str_length(s: String)-&amp;gt; usize {s.</description></item><item><title>About Me</title><link>https://www.gsavitha.in/me/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.gsavitha.in/me/</guid><description>About.-- Hello. I am Savitha &amp;#128075;&amp;#127995;, a passionate web developer. I have been working with web technologies for around 4+ years with 2 years of experience in software industry &amp;#129299;. I've gotten my hands dirty in various languages and frameworks. I mostly worked on backend development, but i'm comfortable in coding frontend as well. My goal is to become a full stack engineer. I am good at JavaScript and its ecosystem &amp;#128170;&amp;#127995;.</description></item><item><title>Today I Learned (General)</title><link>https://www.gsavitha.in/notes/today-i-learned-general/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.gsavitha.in/notes/today-i-learned-general/</guid><description>16 June, 2020 Seppuku A Japanese ritual performed by high command when they loose a battle where there were most likely to win. The person who is supposed to perform this ritual, would kill himself with a dagger by cutting a part of abdomen horizentally so that some of the organ comes out of his belly. This is also known as Harakiri(belly cutting).
Initially this was reserved for Samurai, but adopted by other people when time passed on.</description></item><item><title>Today I Learned (Tech)</title><link>https://www.gsavitha.in/notes/today-i-learned-tech/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.gsavitha.in/notes/today-i-learned-tech/</guid><description>17 June, 2020 ES6: Private method using Symbol() Symbol in JavaScript(ES6) is a data type. The speciality about Symbols are that the value is unique. Using this feature, one could abstract methods of ES6 class. Here&amp;rsquo;s an example:
(() =&amp;gt; { const FORMAT_MSG = Symbol(); class SayHello { constructor(name) { this[FORMAT_MSG](name); } [FORMAT_MSG](name) { this.message = `Hello, ${name}` } done() { alert(this.message); } } window.SayHello = SayHello; // make it available to global scope })() credit: Rajesh Pillai</description></item></channel></rss>