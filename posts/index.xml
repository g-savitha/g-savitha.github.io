<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Archive on Savitha Gollamudi</title><link>https://www.gsavitha.in/posts/</link><description>Recent content in Archive on Savitha Gollamudi</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://www.gsavitha.in/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Slice Type in Rust</title><link>https://www.gsavitha.in/2020/slice-type-in-rust/</link><pubDate>Tue, 30 Jun 2020 12:26:32 +0530</pubDate><guid>https://www.gsavitha.in/2020/slice-type-in-rust/</guid><description>In Rust, there is a concept of borrowing and taking ownership. This is a concept not many languages implement.
Ownership and Borrowing In a Rust program, any given value is owned by a variable. For instance, if we declare let a = 30;, value 30 would be owned by variable a.
Following is a program to illustrate it:
// won&amp;#39;t compile fn main(){letsome_string=String::from(&amp;#34;hello world&amp;#34;);println!(&amp;#34;Length {}&amp;#34;,str_length(some_string));println!(&amp;#34;string is &amp;#39;{}&amp;#39;&amp;#34;,some_string);}fn str_length(s: String)-&amp;gt; usize {s.</description></item></channel></rss>